package cn.zthz.tool.user;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import cn.zthz.tool.common.Formats;
import cn.zthz.tool.common.HzException;
import cn.zthz.tool.db.Connections;
import cn.zthz.tool.db.NamedParameterStatement;
import cn.zthz.tool.db.ResultSetMap;
import cn.zthz.tool.proxy.UserProxy;
import cn.zthz.tool.requirement.ConnectionUtils;
import cn.zthz.tool.requirement.RequirementStatus;
import cn.zthz.tool.requirement.RequirementUtils;
import cn.zthz.tool.requirement.RequirementOperations.QueryOrder;

public class EmployerService {
	public static final EmployerService instance = new EmployerService();
	private static final Log log = LogFactory.getLog(EmployerService.class);
	/**
	 * sCount：累计发布,iCount:发布中,eCount:雇佣中,cCount:已完成,closedCount:已结束,expiredCount:已过期,soCount:搜藏件数
	 * payCommission:支出佣金,employmentCount:成功雇佣,balance:账户余额
	 * @param userId
	 * @return
	 * @throws HzException 
	 */
	public Map<String, Object> home(String userId) throws HzException{
		Connection connection = null;
		Statement statement = null;
		try{
			connection = Connections.instance.get();
			statement = connection.createStatement();
			User user = UserProxy.getUserInfo(userId);
			Map<String, Object> result = new HashMap<>();
			result.put("name",user.getName());
			result.put("nick", user.getNick());
			result.put("email", user.getEmail());
			result.put("userPictureSmall", user.getMainPictureSmall());
			result.put("telphone", user.getTelephone());
			result.put("sponsorScore", user.getSponsorScore());
			String sCountSql = "select count(*) as sCount from Requirement where userId='" +userId+"'";
			int sCount = ResultSetMap.mapInt(statement.executeQuery(sCountSql));
			result.put("sCount", sCount);
			String iCountSql = "select count(*) as iCount from Requirement where status="+RequirementStatus.published+" and userId='"+userId+"'";
			int iCount = ResultSetMap.mapInt(statement.executeQuery(iCountSql));
			result.put("iCount", iCount);
			String eCountSql = "select count(*) as eCount from Requirement where status="+RequirementStatus.selected+" and userId='"+userId+"'";
			int eCount = ResultSetMap.mapInt(statement.executeQuery(eCountSql));
			result.put("eCount",eCount);
			String cCountSql = "select count(*) as cCount from Requirement where status in ("+RequirementStatus.complete+","+RequirementStatus.expired+","+RequirementStatus.closed+") and userId='"+userId+"'";
			int cCount = ResultSetMap.mapInt(statement.executeQuery(cCountSql));
			result.put("cCount", cCount);
			String expiredCountSql = "select count(*) as expiredCount from Requirement where status="+RequirementStatus.expired+" and userId='"+userId+"'";
			int expiredCount = ResultSetMap.mapInt(statement.executeQuery(expiredCountSql));
			result.put("expiredCount", expiredCount);
			String closedCountSql = "select count(*) as closedCount from Requirement where status="+RequirementStatus.closed+" and userId='"+userId+"'";
			int closedCount = ResultSetMap.mapInt(statement.executeQuery(closedCountSql));
			result.put("closedCount", closedCount);
			String soCountSql = "select count(*) as soCount from Store where userId='"+userId+"'";
			int soCount = ResultSetMap.mapInt(statement.executeQuery(soCountSql));
			result.put("soCount", soCount);
			String payCommissionSql = "select sum(price) as payCommission from Requirement where userId='"+userId+"' and status="+RequirementStatus.complete;
			Map<String, Object> map = ResultSetMap.map(statement.executeQuery(payCommissionSql));
			BigDecimal payCommission = (BigDecimal)map.get("payCommission");
			BigDecimal formatPayCommission = Formats.formatMoney(payCommission==null?new BigDecimal("0"):payCommission);
			result.put("payCommission", formatPayCommission);
//			String selectedCandidateSql = "select count(*) from Requirement where status="+RequirementStatus.selected + " and selectedCandidate is not null and userId='"+userId+"'";
//			int selectedCandidateCount = ResultSetMap.mapInt(statement.executeQuery(selectedCandidateSql));
//			result.put("selectedCandidateCount", selectedCandidateCount);
			String employmentCountSql = "select count(*) as count from Requirement where status="+RequirementStatus.complete+" and userId='"+userId+"'";
			int employmentCount = ResultSetMap.mapInt(statement.executeQuery(employmentCountSql));
			result.put("employmentCount", employmentCount);
			String collectUserCountSql = "select count(*) as count from UserCollect where userId='"+userId+"'";
			int collectUserCount = ResultSetMap.mapInt(statement.executeQuery(collectUserCountSql));
			result.put("collectUserCount", collectUserCount);
//			String balanceSql = "select balance from Account where userId='"+userId+"'";
//			BigDecimal balance = (BigDecimal)ResultSetMap.map(statement.executeQuery(balanceSql)).get("balance");
//			BigDecimal formatBalance = Formats.formatMoney(balance);
//			result.put("balance", formatBalance);
			return result;
		}catch(Exception e){
			log.error("employer home query failed!userId:'"+ userId+ "'",e);
			throw new HzException("employer home query failed!userId:'"+userId+"'");
		}finally{
			ConnectionUtils.closeStatement(statement);
			ConnectionUtils.closeConnection(connection);
		}
	}
	
	public List<Map<String, Object>> requirementManagement(String userId, Map<String, Object> conditionArgs, Integer startIndex, Integer pageSize) throws HzException{
		Connection connection = null;
		NamedParameterStatement namedParameterStatement = null;
		List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();
		try{
			connection = Connections.instance.get();
			String sql = createQuerySql(userId, null != conditionArgs ? conditionArgs.keySet() : Collections.EMPTY_SET, startIndex,
					pageSize);
			if(log.isDebugEnabled()){
				log.debug(sql);
			}
			Map<String, Object> args = new HashMap<>();
			if (null != conditionArgs)
				args.putAll(conditionArgs);
			namedParameterStatement = new NamedParameterStatement(connection, sql);
			if(log.isDebugEnabled()){
				log.debug(namedParameterStatement.toString());
			}
			Set<Map.Entry<String, Object>> set = args.entrySet();
			for(Map.Entry<String, Object> entry: set){
				namedParameterStatement.setObject(entry.getKey(), entry.getValue());
			}
			results = ResultSetMap.maps(namedParameterStatement.executeQuery());
			if(null != results){
				for(Map<String, Object> map : results){
					String remainTime = RequirementUtils.remainTime(System.currentTimeMillis(), ((Timestamp)map.get("expire")).getTime());
					map.put("expire", remainTime);
				}
			}
			return results;
		}catch(Exception e){
			log.error("requirement query failed!userId:'"+userId+"'", e);
			throw new HzException("requirement query failed!userId:'"+userId+"'", e);
		}finally{
			ConnectionUtils.closeStatement(namedParameterStatement);
			ConnectionUtils.closeConnection(connection);
		}
	}
	
	private String createQuerySql(String userId, Set<String> conditionKeys,int startIndex, int pageSize) {
		StringBuilder sql = new StringBuilder();
		sql.append("select title,expire,description,address,price,status from Requirement where ");
		if (null != conditionKeys && !conditionKeys.isEmpty()) {
			for (String key : conditionKeys) {
				sql.append(key);
				sql.append("=:");
				sql.append(key);
				sql.append(" and ");
			}
		}
		sql.append(" userId='");
		sql.append(userId);
		sql.append("'");
		sql.append(" order by createTime desc limit ");
		sql.append(startIndex);
		sql.append(",");
		sql.append(pageSize);
		return sql.toString();
	}
	
	public Map<String, Object> employmentSuccess(String userId, int startIndex, int pageSize) throws HzException{
		Connection connection = null;
		Statement statement = null;
		try{
			connection = Connections.instance.get();
			statement = connection.createStatement();
			Map<String, Object> result = new HashMap<>();
			String employmentSql = "select title,description,address,price,completeTime from Requirement where userId='"+userId+"' and status=" +RequirementStatus.complete +" limit "+startIndex+","+pageSize;
			List<Map<String, Object>>  employments = ResultSetMap.maps(statement.executeQuery(employmentSql));
			
			result.put("employments", employments);
			
//			String payCommissionSql = "select sum(price) as payCommission from Requirement where userId='"+userId+"' and status="+RequirementStatus.complete;
//			Map<String, Object> map = ResultSetMap.map(statement.executeQuery(payCommissionSql));
//			BigDecimal payCommission = (BigDecimal)map.get("payCommission");
//			BigDecimal formatPayCommission = Formats.formatMoney(payCommission);
//			result.put("payCommission", formatPayCommission);
			String balanceSql = "select balance from Account where userId='"+userId+"'";
			BigDecimal balance = (BigDecimal)ResultSetMap.map(statement.executeQuery(balanceSql)).get("balance");
			BigDecimal formatBalance = Formats.formatMoney(balance);
			result.put("balance", formatBalance);
			return result;
		}catch(Exception e){
			log.error("employment query failed!userId:'"+userId+"'", e);
			throw new HzException("employment query failed!userId:'"+userId+"'", e);
		}finally{
			ConnectionUtils.closeStatement(statement);
			ConnectionUtils.closeConnection(connection);
		}
	}
	
}
