package cn.zthz.tool.user;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import cn.zthz.actor.rest.ErrorCodes;
import cn.zthz.tool.common.HzException;
import cn.zthz.tool.common.StringUtils;
import cn.zthz.tool.db.Connections;
import cn.zthz.tool.db.QuickDB;
import cn.zthz.tool.db.ResultSetMap;
import cn.zthz.tool.requirement.ConnectionUtils;

public class UserCollectService {
	private static final Log log = LogFactory.getLog(UserCollectService.class);
	public static final UserCollectService instance = new UserCollectService();

	public void add(String userId, String fid) throws HzException {
		Connection connection = null;
		Statement statement = null;
		try {
			connection = Connections.instance.get();
			statement = connection.createStatement();
			// String checkUserCollectSql =
			// "select count(*) from UserCollect where fid='" + fid +
			// "' and userId='" + userId +"'";
			// if(log.isDebugEnabled()){
			// log.debug(checkUserCollectSql);
			// }
			// int userCollectCount =
			// ResultSetMap.mapInt(statement.executeQuery(checkUserCollectSql));
			// if(0 != userCollectCount){
			// log.debug("not add userCollect repeatability! fid: '" + fid +
			// "', userId: '" + userId + "'");
			// throw new HzException(ErrorCodes.ALREADY_STORED,
			// "not add userCollect repeatability! fid: '" + fid +
			// "', userId: '" + userId + "'");
			// }else{
			String addUserCollectSql = "insert ignore UserCollect(fid, createTime, userId) values('" + fid + "','"
					+ new Timestamp(System.currentTimeMillis()) + "','" + userId + "')";
			if (log.isDebugEnabled()) {
				log.debug(addUserCollectSql);
			}
			QuickDB.insert(addUserCollectSql);
			// }
		} catch (SQLException e) {
			log.debug("add userCollect failed! requirementId: '" + fid + "', userId: '" + userId + "'");
			throw new HzException("add userCollect failed! requirementId: '" + fid + "', userId: '" + userId + "'", e);
		} finally {
			ConnectionUtils.closeStatement(statement);
			ConnectionUtils.closeConnection(connection);
		}
	}

	public void delete(List<String> ids, String userId) throws HzException {
		if (log.isDebugEnabled()) {
			log.debug("userCollect delete params:'" + ids.toString() + "'");
		}
		Connection connection = null;
		Statement statement = null;
		try {
			connection = Connections.instance.get();
			statement = connection.createStatement();
			if (null != ids) {
				String deleteUserCollectSql = "delete from UserCollect where fid in ('" + StringUtils.join(ids, "','") + "') and userId='"
						+ userId + "'";
				if (log.isDebugEnabled()) {
					log.debug(deleteUserCollectSql);
				}
				statement.executeUpdate(deleteUserCollectSql);
			}
		} catch (Exception e) {
			log.debug("delete userCollect failed! ids:'" + ids.toString() + "'");
			throw new HzException("delete userCollect failed! ids:'" + ids.toString() + "'", e);
		} finally {
			ConnectionUtils.closeStatement(statement);
			ConnectionUtils.closeConnection(connection);
		}
	}
	
	public List<Map<String, Object>> query(String userId, int startIndex, int pageSize) throws HzException{
		Connection connection = null;
		Statement statement = null;
		try{
			connection = Connections.instance.get();
			statement = connection.createStatement();
			String userCollectSql = "select u.mainPictureSmall,u.completeScore,u.sponsorScore,u.applyCompleteCount,uc.fid,uc.id,u.name,(select GROUP_CONCAT(cast(t.tnum as char)) from UserTags t where t.userId=uc.fid) as tags,u.telephone from UserCollect uc left join User u on uc.fid=u.id where uc.userId='"+userId+"' limit "+startIndex+","+pageSize;
			if(log.isDebugEnabled()){
				log.debug(userCollectSql);
			}
			List<Map<String, Object>> userCollectInfo = ResultSetMap.maps(statement.executeQuery(userCollectSql));
			return userCollectInfo;
		}catch(Exception e){
			log.debug("query userCollect failed! userId:'" + userId + "'");
			throw new HzException("query userCollect failed! userId:'" + userId + "'", e);
		}finally{
			ConnectionUtils.closeStatement(statement);
			ConnectionUtils.closeConnection(connection);
		}
	}

}
